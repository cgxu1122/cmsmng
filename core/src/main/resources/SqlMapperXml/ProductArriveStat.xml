<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.ifhz.core.mapper.stat.ProductArriveStatMapper">
    <sql id="TABLE_NAME">TY_PRODUCT_ARRIVE_STAT</sql>

    <resultMap id="BaseResultMap" type="com.ifhz.core.po.stat.ProductArriveStat">
        <id column="ID" property="id" jdbcType="BIGINT"/>
        <result column="PRODUCT_ID" property="productId" jdbcType="VARCHAR"/>
        <result column="GROUP_ID" property="groupId" jdbcType="BIGINT"/>
        <result column="CHANNEL_ID" property="channelId" jdbcType="BIGINT"/>
        <result column="UA" property="ua" jdbcType="VARCHAR"/>
        <result column="STAT_DATE" property="statDate" jdbcType="DATE"/>
        <result column="CREATE_TIME" property="createTime" jdbcType="TIMESTAMP"/>

        <result column="TOTAL_NUM" property="totalNum" jdbcType="BIGINT"/>
        <result column="VALID_NUM" property="validNum" jdbcType="BIGINT"/>
        <result column="INVALID_NUM" property="invalidNum" jdbcType="BIGINT"/>
        <result column="REPLACE_NUM" property="replaceNum" jdbcType="BIGINT"/>
        <result column="UNINSTALL_NUM" property="uninstallNum" jdbcType="BIGINT"/>
        <result column="UN_AND_RE_NUM" property="unAndReNum" jdbcType="BIGINT"/>

        <result column="MD5_KEY" property="md5Key" jdbcType="VARCHAR"/>
        <result column="VERSION" property="version" jdbcType="BIGINT"/>
    </resultMap>

    <insert id="insert" parameterType="com.ifhz.core.po.stat.ProductArriveStat">
        <selectKey resultType="java.lang.Long" keyProperty="id" order="AFTER">
            SELECT SEQ_PRODUCT_ARRIVE_STAT.CURRVAL AS id from dual
        </selectKey>
        insert into
        <include refid="TABLE_NAME"/>
        (
        ID,
        PRODUCT_ID,
        GROUP_ID,
        CHANNEL_ID,
        UA,
        STAT_DATE,
        CREATE_TIME,
        TOTAL_NUM,
        VALID_NUM,
        INVALID_NUM,
        REPLACE_NUM,
        UNINSTALL_NUM,
        UN_AND_RE_NUM,
        MD5_KEY,
        VERSION
        ) values (
        SEQ_PRODUCT_ARRIVE_STAT.NEXTVAL,
        #{productId,jdbcType=BIGINT},
        #{groupId,jdbcType=BIGINT},
        #{channelId,jdbcType=BIGINT},
        #{ua,jdbcType=VARCHAR},
        #{statDate,jdbcType=DATE},
        #{createTime,jdbcType=TIMESTAMP},
        #{totalNum,jdbcType=BIGINT},
        #{validNum,jdbcType=BIGINT},
        #{invalidNum,jdbcType=BIGINT},
        #{replaceNum,jdbcType=BIGINT},
        #{uninstallNum,jdbcType=BIGINT},
        #{unAndReNum,jdbcType=BIGINT},
        #{md5Key,jdbcType=VARCHAR},
        #{version,jdbcType=BIGINT}
        )
    </insert>

    <update id="update" parameterType="com.ifhz.core.po.stat.ProductArriveStat">
        update
        <include refid="TABLE_NAME"/>
        <set>
            <if test="version != null">
                VERSION = VERSION + 1,
            </if>
            <if test="totalNum != null and totalNum != 0">
                TOTAL_NUM = #{totalNum},
            </if>
            <if test="validNum != null and validNum != 0">
                VALID_NUM = #{validNum},
            </if>
            <if test="invalidNum != null and invalidNum != 0">
                INVALID_NUM = #{invalidNum},
            </if>
            <if test="replaceNum != null and replaceNum != 0">
                REPLACE_NUM = #{replaceNum},
            </if>
            <if test="uninstallNum != null and uninstallNum != 0">
                UNINSTALL_NUM = #{uninstallNum},
            </if>
            <if test="unAndReNum != null  and unAndReNum != 0">
                UN_AND_RE_NUM = #{unAndReNum},
            </if>
        </set>
        where ID = #{id}
        and VERSION = #{version}
    </update>

    <select id="getById" resultMap="BaseResultMap">
        select * from
        <include refid="TABLE_NAME"/>
        where ID = #{id}
    </select>

    <select id="getByMd5Key" resultMap="BaseResultMap">
        select * from
        <include refid="TABLE_NAME"/>
        where MD5_KEY = #{md5Key}
    </select>

    <select id="queryByVo" resultMap="BaseResultMap">
        select
        stat.ID,
        stat.PRODUCT_ID,
        stat.GROUP_ID,
        stat.CHANNEL_ID,
        stat.UA,
        stat.STAT_DATE,
        stat.CREATE_TIME,
        stat.TOTAL_NUM,
        stat.VALID_NUM,
        stat.INVALID_NUM,
        stat.REPLACE_NUM,
        stat.UNINSTALL_NUM,
        stat.UN_AND_RE_NUM,
        stat.MD5_KEY,
        stat.VERSION
        from
        <include refid="TABLE_NAME"/>
        stat
        where 1=1
        <if test="record.channelIdCondition != null">
            and stat.CHANNEL_ID in (${record.channelIdCondition})
        </if>

        <if test="record.groupId != null and record.groupId != ''">
            and stat.GROUP_ID = #{record.groupId}
        </if>

        <if test="record.productId != null and record.productId != ''">
            and stat.PRODUCT_ID = #{record.productId}
        </if>
        <if test="record.ua != null and record.ua != ''">
            and stat.UA = #{record.ua}
        </if>
        <if test="record.startDate != null">
            and stat.STAT_DATE >= #{record.startDate}
        </if>
        <if test="record.endDate != null">
            <![CDATA[
            and stat.STAT_DATE <= #{record.endDate}
            ]]>
        </if>
        order by stat.STAT_DATE desc
    </select>

    <select id="querySumByVo" resultMap="BaseResultMap">
        select
        PRODUCT_ID,
        UA,
        STAT_DATE,
        sum(VALID_NUM) VALID_NUM,
        sum(INVALID_NUM) INVALID_NUM
        from
        <include refid="TABLE_NAME"/>
        where 1=1
        <if test="record.partnerId != null and record.partnerId != ''">
            and exists (
            select info.PRODUCT_ID from TY_PRODUCT_INFO info
            where PARTNER_ID = #{partnerId}
            and info.QUERY_DATA_SOURCE= 'Y'
            and info.PRODUCT_ID = PRODUCT_ID
            )
        </if>
        <if test="record.channelId != null">
            and CHANNEL_ID = #{record.channelId}
        </if>

        <if test="groupId != null and groupId != ''">
            and GROUP_ID = #{groupId}
        </if>

        <if test="record.productId != null and record.productId != ''">
            and PRODUCT_ID = #{record.productId}
        </if>
        <if test="record.ua != null and record.ua != ''">
            and UA = #{record.ua}
        </if>
        <if test="record.startDate != null">
            and STAT_DATE >= #{record.startDate}
        </if>
        <if test="record.endDate != null">
            <![CDATA[
            and STAT_DATE <= #{record.endDate}
            ]]>
        </if>
        group by PRODUCT_ID,UA,STAT_DATE
        order by STAT_DATE desc
    </select>

    <select id="queryCountByVo" parameterType="com.ifhz.core.po.stat.ProductArriveStat"
            resultMap="BaseResultMap">
        select
        sum(stat.TOTAL_NUM) TOTAL_NUM,
        sum(stat.VALID_NUM) VALID_NUM,
        sum(stat.INVALID_NUM) INVALID_NUM,
        sum(stat.REPLACE_NUM) REPLACE_NUM,
        sum(stat.UNINSTALL_NUM) UNINSTALL_NUM,
        sum(stat.UN_AND_RE_NUM) UN_AND_RE_NUM
        from
        <include refid="TABLE_NAME"/>
        stat
        <if test="channelIdCondition != null">
            and stat.CHANNEL_ID in (${channelIdCondition})
        </if>

        <if test="groupId != null and groupId != ''">
            and stat.GROUP_ID = #{groupId}
        </if>

        <if test="productId != null and productId != ''">
            and stat.PRODUCT_ID = #{productId}
        </if>
        <if test="ua != null and ua != ''">
            and stat.UA = #{ua}
        </if>
        <if test="startDate != null">
            and stat.STAT_DATE >= #{startDate}
        </if>
        <if test="endDate != null">
            <![CDATA[
            and stat.STAT_DATE <= #{endDate}
            ]]>
        </if>
    </select>


    <select id="queryTotalCount" resultType="long">
        select count(0)
        from
        <include refid="TABLE_NAME"/>
        where create_time between #{startTime} and #{endTime}
    </select>

    <select id="queryStatList" resultMap="BaseResultMap">
        select *
        from
        <include refid="TABLE_NAME"/>
        where create_time between #{startTime} and #{endTime}
    </select>
</mapper>